type downloader_options = {http_chunk_size: option(int)};

type format = {
  http_headers: option(Js.Dict.t(string)),
  format_note: option(string),
  format: option(string),
  url: option(string),
  vcodec: option(string),
  tbr: option(float),
  abr: option(float),
  fps: option(float),
  player_url: option(string),
  downloader_options: option(downloader_options),
  ext: option(string),
  filesize: option(int),
  format_id: option(string),
  acodec: option(string),
  width: option(int),
  height: option(int),
  resolution: option(string),
};

type thumbnail = {
  id: option(string),
  url: option(string),
};

type video = {
  protocol: option(string),
  extractor: option(string),
  upload_date: option(string),
  creator: option(string),
  series: option(string),
  format_note: option(string),
  chapters: option(string),
  season_number: option(string),
  like_count: option(int),
  duration: option(float),
  fulltitle: option(string),
  player_url: option(string),
  id: option(string),
  view_count: option(string),
  playlist: option(string),
  title: option(string),
  _filename: option(string),
  format: option(string),
  ext: option(string),
  playlist_index: option(int),
  dislike_count: option(int),
  average_rating: option(float),
  abr: option(int),
  uploader_url: option(string),
  subtitles: option(Js.Dict.t(string)),
  age_limit: option(int),
  annotations: option(string),
  webpage_url_basename: option(string),
  acodec: option(string),
  display_id: option(string),
  automatic_captions: option(Js.Dict.t(string)),
  description: option(string),
  tags: option(Js.Array.t(string)),
  requested_subtitles: option(string),
  start_time: option(int),
  uploader: option(string),
  format_id: option(string),
  episode_number: option(int),
  uploader_id: option(string),
  categories: option(Js.Array.t(string)),
  thumbnails: option(Js.Array.t(thumbnail)),
  width: option(int),
  height: option(int),
  fps: option(float),
  formats: option(Js.Array.t(format)),
};

let metadata: string => BsCallback.t(video);
